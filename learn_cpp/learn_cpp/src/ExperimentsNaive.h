#pragma once
#include <iostream>
#include <fstream>
#include <cassert>
#include <random>
#include <math.h>
#include <Eigen/Dense>
#include "UTGraph.h"
#include "GWishartSampler.h"
#include "CycleBasisSampler.h"
#include "MCMC.h" 

template <int n>
void experiment0(int MCMC_iter, int N = 200) {
	std::cout << "STARTING EXPERIMENT 1: EMPTY GRAPH \n";
	std::default_random_engine generator(1234);
	Prior<n> prior;
	Proposal<n> prop;
	Eigen::MatrixXd D = Eigen::MatrixXd::Identity(n, n);
	Likelihood<n> lik(3, &D); // input is address to matrix D

	// Generate data from empty graph 
	Eigen::MatrixXd covar = Eigen::MatrixXd::Identity(n, n);
	normal_random_variable sample{ covar };
	Eigen::MatrixXd X(N, n);
	for (int i = 0; i < N; i++) {
		X({ i }, Eigen::all) = sample(generator);
	}
	Eigen::MatrixXd U = X.transpose() * X;
	Data data(N, &U);

	// Saving Data
	std::ofstream outfile;
	outfile.open("experiment0_naive_U.mat");
	if (outfile.is_open()) {
		outfile << U << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Run MCMC 
	std::cout << "Running MCMC... \n";
	MCMC(prior, lik, prop, data, MCMC_iter, generator, "experiment0_naive.csv");
}

template <int n>
void experiment1(int MCMC_iter, int N = 200) {
	std::cout << "STARTING EXPERIMENT 1: CIRCLE GRAPH \n";
	std::default_random_engine generator(1234);
	Prior<n> prior;
	Proposal<n> prop;
	Eigen::MatrixXd D = Eigen::MatrixXd::Identity(n, n);
	Likelihood<n> lik(3, &D); // input is address to matrix D

	// Generate data from circle graph 
	Eigen::MatrixXd covar = Eigen::MatrixXd::Identity(n, n);
	UTGraph<n> G;
	G.AddCircle();
	GWishartLikelihoodSampler<n> sample(G, n, covar);
	Eigen::MatrixXd X(N, n);

	for (int i = 0; i < N; i++){
		X({ i }, Eigen::all) = sample();
	}

	Eigen::MatrixXd U = X.transpose() * X;
	Data data(N, &U);

	// Saving Data
	std::ofstream outfile;
	outfile.open("experiment1_naive_U.mat");
	if (outfile.is_open()) {
		outfile << U << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Run MCMC 
	std::cout << "Running MCMC... \n";
	MCMC(prior, lik, prop, data, MCMC_iter, generator, "experiment1_naive.csv");
}

template <int n>
void experiment2(int MCMC_iter, int N=200) {
	// Generate data from two G-Wishart distribution generated by random graphs
	std::cout << "STARTING EXPERIMENT 2: RANDOM GRAPHS \n";

	std::default_random_engine generator(1234);
	Prior<n> prior;
	Proposal<n> prop;
	Eigen::MatrixXd D = Eigen::MatrixXd::Identity(n, n);
	Likelihood<n> lik(3, &D); // input is address to matrix D
	Eigen::MatrixXd covar = Eigen::MatrixXd::Identity(n, n);
	UTGraph<n> G;
	Eigen::MatrixXd X(N, n);
	std::ofstream outfile;

	std::cout << "FIRST RANDOM GRAPH: \n";
	// Generate Random Graph
	G = RandomGraph<n>(generator);
	std::cout << "Saving G: \n";
	std::cout << G << std::endl;
	outfile.open("experiment2-1_naive_G.mat");
	if (outfile.is_open()) {
		outfile << G << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Generating Data
	GWishartLikelihoodSampler<n> sample(G, n, covar);
	for (int i = 0; i < N; i++) {
		X({ i }, Eigen::all) = sample();
	}
	Eigen::MatrixXd U = X.transpose() * X;
	Data data(N, &U);

	// Saving Data
	std::cout << "Saving U: \n";
	std::cout << U << std::endl;
	outfile.open("experiment2-1_naive_U.mat");
	if (outfile.is_open()) {
		outfile << U << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Run MCMC 
	std::cout << "Running MCMC... \n";
	MCMC(prior, lik, prop, data, MCMC_iter, generator, "experiment2-1_naive.csv");


	std::cout << "SECOND RANDOM GRAPH: \n";
	// Generate Random Graph
	G = RandomGraph<n>(generator);
	std::cout << "Saving G: \n";
	std::cout << G << std::endl;
	outfile.open("experiment2-2_naive_G.mat");
	if (outfile.is_open()) {
		outfile << G << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Generating Data
	GWishartLikelihoodSampler<n> sample(G, n, covar);
	for (int i = 0; i < N; i++) {
		X({ i }, Eigen::all) = sample();
	}
	Eigen::MatrixXd U = X.transpose() * X;
	Data data(N, &U);

	// Saving Data
	std::ofstream outfile;
	std::cout << "Saving U: \n";
	std::cout << U << std::endl;
	outfile.open("experiment2-2_naive_U.mat");
	if (outfile.is_open()) {
		outfile << U << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Run MCMC 
	std::cout << "Running MCMC... \n";
	MCMC(prior, lik, prop, data, MCMC_iter, generator, "experiment2-2_naive.csv");

}

template <int n>
void experiment3(int MCMC_iter, int N = 200) {
	// Generate data from two G-Wishart distribution generated by random graphs
	std::cout << "STARTING EXPERIMENT 3: RANDOM GRAPHS FROM CYCLE BASIS \n";

	std::default_random_engine generator(1234);
	Prior<n> prior;
	Proposal<n> prop;
	Eigen::MatrixXd D = Eigen::MatrixXd::Identity(n, n);
	Likelihood<n> lik(3, &D); // input is address to matrix D


	Eigen::MatrixXd covar = Eigen::MatrixXd::Identity(n, n);
	CycleBasis<n> cycbasis;
	CyclePrior<n> cycprior(cycbasis);
	CycleParams<n> cycparam;
	UTGraph<n> G;
	Eigen::MatrixXd X(N, n);
	std::ofstream outfile;

	std::cout << "FIRST RANDOM GRAPH: \n";
	// Generate Random Graph
	cycparam = cycprior.Sample<n>(generator);
	G = cycparam.GetG();
	std::cout << "Saving G: \n";
	std::cout << G << std::endl;
	outfile.open("experiment3-1_naive_G.mat");
	if (outfile.is_open()) {
		outfile << G << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Generating Data
	GWishartLikelihoodSampler<n> sample(G, n, covar);
	for (int i = 0; i < N; i++) {
		X({ i }, Eigen::all) = sample();
	}
	Eigen::MatrixXd U = X.transpose() * X;
	Data data(N, &U);

	// Saving Data
	std::cout << "Saving U: \n";
	std::cout << U << std::endl;
	outfile.open("experiment3-1_naive_U.mat");
	if (outfile.is_open()) {
		outfile << U << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Run MCMC 
	std::cout << "Running MCMC... \n";
	MCMC(prior, lik, prop, data, MCMC_iter, generator, "experiment3-1_naive.csv");


	std::cout << "SECOND RANDOM GRAPH: \n";
	// Generate Random Graph
	cycparam = cycprior.Sample<n>(generator);
	G = cycparam.GetG();
	std::cout << "Saving G: \n";
	std::cout << G << std::endl;
	outfile.open("experiment3-2_naive_G.mat");
	if (outfile.is_open()) {
		outfile << G << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Generating Data
	GWishartLikelihoodSampler<n> sample(G, n, covar);
	for (int i = 0; i < N; i++) {
		X({ i }, Eigen::all) = sample();
	}
	Eigen::MatrixXd U = X.transpose() * X;
	Data data(N, &U);

	// Saving Data
	std::ofstream outfile;
	std::cout << "Saving U: \n";
	std::cout << U << std::endl;
	outfile.open("experiment3-2_naive_U.mat");
	if (outfile.is_open()) {
		outfile << U << std::endl;
	}
	else { std::cout << "Cannot open file!!" << std::endl; }

	// Run MCMC 
	std::cout << "Running MCMC... \n";
	MCMC(prior, lik, prop, data, MCMC_iter, generator, "experiment3-2_naive.csv");
}